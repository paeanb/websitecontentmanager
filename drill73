 #drill 72 creating a GUI to update website content

from tkinter import *
from tkinter import ttk
from tkinter import messagebox
import webbrowser
import sqlite3
import os
import drill73_db1

#Python 3.5.1

class retailSite:

    def __init__(self, master):

        master.title('Retail Website Content Manager')
        master.resizable(False, False)
        master.configure(background = '#F6CED8')
        
        #styling the widgets
        self.style = ttk.Style()
        self.style.configure('TFrame', background = '#F6CED8')
        self.style.configure('TButton', background = '#F6CED8')
        self.style.configure('TLabel', background = '#F6CED8', font = ('Arial', 11, 'bold'))
        self.style.configure('Header.TLabel', background = '#F6CED8', font = ('Arial', 18, 'bold'))
        
        #frame constructor method
        self.frame_header = ttk.Frame(master)
        #pack method geometry manager
        self.frame_header.pack()


        #self.logo = PhotoImage(file = 'shoe.png')
        #ttk.Label(self.frame_header, image = self.logo).grid(row = 0, column = 0, rowspan = 2, padx = 40)
        ttk.Label(self.frame_header, text = "Retail Website Manager", style = 'Header.TLabel').grid(row = 0, column = 1, padx= 10)
        ttk.Label(self.frame_header, text = "Update your website's content").grid(row = 1, column = 1, sticky = 'n')
        
        self.frame_content = ttk.Frame(master)
        self.frame_content.pack()

        ttk.Label(self.frame_content, text = 'Header:').grid(row = 0, column = 0, padx = 10, sticky = 'sw')
        ttk.Label(self.frame_content, text = 'Body:').grid(row = 2, column = 0, padx = 10, sticky = 'sw')
        
      
        self.entry_htmlH1 = ttk.Entry(self.frame_content, width = 100, font = ('Arial', 10))    
        self.text_htmlP = Text(self.frame_content, width = 100, height = 10, font = ('Ariel', 10))
        self.entry_htmlH1.grid(row= 1, column = 0, columnspan= 4, padx = 10)
        self.text_htmlP.grid(row = 3, column = 0, columnspan= 4, padx = 10)

        ttk.Button(self.frame_content, text = 'Delete', command = self.delete).grid(row = 4, column = 0, pady= 10)
        ttk.Button(self.frame_content, text = 'Save', command = self.save).grid(row = 4, column = 1, pady= 10)
        ttk.Button(self.frame_content, text = 'Submit', command = self.submit).grid(row = 4, column = 2, pady= 10)
        ttk.Button(self.frame_content, text = 'View Page', command = self.viewPage).grid(row = 4, column = 3, pady= 10)


        self.frame_load = ttk.Frame(master)
        #pack method geometry manager
        self.frame_load.pack()

        
        scroll = Scrollbar(self.frame_load, orient = VERTICAL)
        self.lb = Listbox(self.frame_load, exportselection=0, yscrollcommand=scroll.set, height = 6, width= 110)
        scroll.config(command= self.lb.yview)
        scroll.pack(side=RIGHT, fill=Y)
        self.lb.bind('<<ListboxSelect>>', self.onSelect)
        self.lb.pack(side=LEFT, fill=BOTH, expand=1)
        

        #self.frame_button = ttk.Frame(master)
        #self.frame_button.pack()
        #ttk.Button(self.frame_button, text = 'Load', command = "").grid(pady = 10)


        def onStartUp():
            conn = sqlite3.connect('retailSite.db')
            cursor = conn.execute("SELECT COUNT(*) FROM WEBSITE_CONTENT")
            count = cursor.fetchone()[0]
            i = 0
            while i < count:
                    cursor.execute("SELECT HEADER FROM WEBSITE_CONTENT")
                    varList = cursor.fetchall()[i]
                    for item in varList:
                        self.lb.insert(0, str(item))
                        i = i + 1
            conn.close()

        ###### Initialize the  Listbox ######
        onStartUp()

    
    def onSelect(self, event):
        varList = event.widget #ListBox widget
        count = varList.size()
        if count > 0:
            index = varList.curselection() #Gets the cursor selection's index
            value = varList.get(index) #Gets the cursor selected value
            self.entry_htmlH1.delete(0, END)
            self.entry_htmlH1.insert(0, value)
            conn = sqlite3.connect('retailSite.db')
            with conn:
                cursor = conn.cursor()
                cursor.execute("SELECT BODY FROM WEBSITE_CONTENT where HEADER = (?)", [value])
                varBody = cursor.fetchall()[0]
                for b in varBody:
                    self.text_htmlP.delete(1.0, END)
                    self.text_htmlP.insert(1.0, b)
        else:
            pass
        
    def save(self):
        self.h1Text = self.entry_htmlH1.get() #gets content from header
        self.h1Text = self.h1Text.strip()
        self.h1Text = self.h1Text.upper()
        self.pText = self.text_htmlP.get(1.0, 'end') #gets content from body
        if (len(self.pText) > 1) and (len(self.h1Text) > 0):
            drill73_db1.newEntry(self.h1Text, self.pText)#saves header and body to DB
            messagebox.showinfo(title = "Success!", message = "Site Content Saved!")
            self.entry_htmlH1.delete(0, END)
            self.text_htmlP.delete(1.0, END)
            self.lb.delete(0,END)
            for item in drill73_db1.viewDbHeader(): #refreshes listbox to include new saved content
                self.lb.insert(END, item)
            self.lb.delete(0,END)
            conn = sqlite3.connect('retailSite.db')
            cursor = conn.execute("SELECT COUNT(*) FROM WEBSITE_CONTENT")
            count = cursor.fetchone()[0]
            i = 0
            while i < count:
                    cursor.execute("SELECT HEADER FROM WEBSITE_CONTENT")
                    varList = cursor.fetchall()[i]
                    for item in varList:
                        self.lb.insert(0, str(item))
                        i = i + 1
            conn.close()
        else:
            messagebox.showerror("Missing Text Error","Please ensure that there is information in the Header and Body fields.")
                

    def delete(self):
        varSel = self.lb.get(self.lb.curselection())
        confirm = messagebox.askokcancel("Delete Confirmation", "'{}' will be permenantly deleted, are you sure?".format(varSel))
        if confirm:
            conn = sqlite3.connect('retailSite.db')
            with conn:
                cursor = conn.cursor()
                cursor.execute("DELETE FROM WEBSITE_CONTENT WHERE HEADER = '"+varSel+"'")
            conn.commit()
            self.entry_htmlH1.delete(0, 'end')
            self.text_htmlP.delete(1.0, 'end')
        else:
            pass
        self.lb.delete(0,END)
        cursor = conn.execute("SELECT COUNT(*) FROM WEBSITE_CONTENT")
        count = cursor.fetchone()[0]
        i = 0
        while i < count:
                cursor.execute("SELECT HEADER FROM WEBSITE_CONTENT")
                varList = cursor.fetchall()[i]
                for item in varList:
                    self.lb.insert(0, str(item))
                    i = i + 1
        conn.close()

    def createHtml(self):
        self.html = open('index.html', 'w')
        self.content = "<html> \n<body> \n <h1> \n" + self.h1Text + "\n </h1> \n <p> \n" \
                       + self.pText + "\n </p> \n</body> \n</html>"
        self.html.write(self.content)
        self.html.close()

    def viewPage(self):
        self.new = 2
        self.url = 'index.html'
        webbrowser.open(self.url, new = self.new)

    def submit(self):
        self.h1Text = self.entry_htmlH1.get()
        
        self.pText = self.text_htmlP.get(1.0, 'end')
        
        self.createHtml()
        self.clear()
        messagebox.showinfo(title = "Success!", message = "Site Content Updated!")
          
    def clear(self): #clears header and body 
        self.entry_htmlH1.delete(0, 'end')
        self.text_htmlP.delete(1.0, 'end')
        
def main():
    root = Tk()
    feedback = retailSite(root)
    root.mainloop()
    drill73_db1.createTable()

if __name__ == "__main__": main()
